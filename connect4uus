import numpy as np
import random
import pygame
import sys
import math

# Corrected color names
DARK_BLUE = (0, 0, 0)
SILVER = (192, 192, 192)
LIGHT_RED = (255, 153, 153)
PALE_YELLOW = (255, 255, 153)
BACKGROUND_COLOR = (0, 0, 25)

ROW_COUNT = 4
COLUMN_COUNT = 5

PLAYER = 0
AI = 1

EMPTY = 0
PLAYER_PIECE = 1
AI_PIECE = 2

WINDOW_LENGTH = 4

def create_board():
    board = np.zeros((ROW_COUNT, COLUMN_COUNT))
    board[0] = [1, 1, 2, 1, 2]
    board[1] = [2, 1, 0, 2, 1]
    board[2] = [1, 2, 0, 2, 0]
    board[3] = [0, 1, 0, 0, 0]
    return board

def drop_piece(board, row, col, piece):
    board[row][col] = piece

def is_valid_location(board, col):
    return board[ROW_COUNT - 1][col] == 0

def get_next_open_row(board, col):
    for r in range(ROW_COUNT):
        if board[r][col] == 0:
            return r

def print_board(board):
    print(np.flip(board, 0))

def winning_move(board, piece):
    # Check horizontal locations for win
    for c in range(COLUMN_COUNT - 3):
        for r in range(ROW_COUNT):
            if board[r][c] == piece and board[r][c + 1] == piece and board[r][c + 2] == piece and board[r][c + 3] == piece:
                return True

    # Check vertical locations for win
    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT - 3):
            if board[r][c] == piece and board[r + 1][c] == piece and board[r + 2][c] == piece and board[r + 3][c] == piece:
                return True

    # Check positively sloped diagonals
    for c in range(COLUMN_COUNT - 3):
        for r in range(ROW_COUNT - 3):
            if board[r][c] == piece and board[r + 1][c + 1] == piece and board[r + 2][c + 2] == piece and board[r + 3][c + 3] == piece:
                return True

    # Check negatively sloped diagonals
    for c in range(COLUMN_COUNT - 3):
        for r in range(3, ROW_COUNT):
            if board[r][c] == piece and board[r - 1][c + 1] == piece and board[r - 2][c + 2] == piece and board[r - 3][c + 3] == piece:
                return True

def evaluate_window(window, piece):
    score = 0
    opp_piece = PLAYER_PIECE if piece == AI_PIECE else AI_PIECE

    if window.count(piece) == 4:
        score += 100
    elif window.count(piece) == 3 and window.count(EMPTY) == 1:
        score += 5
    elif window.count(piece) == 2 and window.count(EMPTY) == 2:
        score += 2

    if window.count(opp_piece) == 3 and window.count(EMPTY) == 1:
        score -= 4

    return score

def score_position(board, piece):
    score = 0

    # Score center column
    center_array = [int(i) for i in list(board[:, COLUMN_COUNT // 2])]
    center_count = center_array.count(piece)
    score += center_count * 3

    # Score Horizontal
    for r in range(ROW_COUNT):
        row_array = [int(i) for i in list(board[r, :])]
        for c in range(COLUMN_COUNT - 3):
            window = row_array[c:c + WINDOW_LENGTH]
            score += evaluate_window(window, piece)

    # Score Vertical
    for c in range(COLUMN_COUNT):
        col_array = [int(i) for i in list(board[:, c])]
        for r in range(ROW_COUNT - 3):
            window = col_array[r:r + WINDOW_LENGTH]
            score += evaluate_window(window, piece)

    # Score positive sloped diagonal
    for r in range(ROW_COUNT - 3):
        for c in range(COLUMN_COUNT - 3):
            window = [board[r + i][c + i] for i in range(WINDOW_LENGTH)]
            score += evaluate_window(window, piece)

    # Score negative sloped diagonal
    for r in range(ROW_COUNT - 3):
        for c in range(COLUMN_COUNT - 3):
            window = [board[r + 3 - i][c + i] for i in range(WINDOW_LENGTH)]
            score += evaluate_window(window, piece)

    return score

def is_terminal_node(board):
    return winning_move(board, PLAYER_PIECE) or winning_move(board, AI_PIECE) or len(get_valid_locations(board)) == 0

def minimax(board, depth, alpha, beta, maximizingPlayer):
    valid_locations = get_valid_locations(board)
    is_terminal = is_terminal_node(board)
    if depth == 0 or is_terminal:
        if is_terminal:
            if winning_move(board, AI_PIECE):
                return None, 100000000000000
            elif winning_move(board, PLAYER_PIECE):
                return None, -10000000000000
            else:
                return None, 0
        else:
            return None, score_position(board, AI_PIECE)
    
    if maximizingPlayer:
        value = -math.inf
        column = random.choice(valid_locations)
        for col in valid_locations:
            row = get_next_open_row(board, col)
            b_copy = board.copy()
            drop_piece(b_copy, row, col, AI_PIECE)
            new_score = minimax(b_copy, depth - 1, alpha, beta, False)[1]
            if new_score > value:
                value = new_score
                column = col
            alpha = max(alpha, value)
            if alpha >= beta:
                break
        return column, value

    else:  # Minimizing player
        value = math.inf
        column = random.choice(valid_locations)
        for col in valid_locations:
            row = get_next_open_row(board, col)
            b_copy = board.copy()
            drop_piece(b_copy, row, col, PLAYER_PIECE)
            new_score = minimax(b_copy, depth - 1, alpha, beta, True)[1]
            if new_score < value:
                value = new_score
                column = col
            beta = min(beta, value)
            if alpha >= beta:
                break
        return column, value

def get_valid_locations(board):
    valid_locations = []
    for col in range(COLUMN_COUNT):
        if is_valid_location(board, col):
            valid_locations.append(col)
    return valid_locations

def is_draw(board):
    return len(get_valid_locations(board)) == 0 and not (winning_move(board, PLAYER_PIECE) or winning_move(board, AI_PIECE))

def draw_gradient_rect(surface, color1, color2, rect):
    color1 = np.array(color1)
    color2 = np.array(color2)
    height = rect.height
    for y in range(height):
        color = color1 + (color2 - color1) * (y / height)
        pygame.draw.line(surface, color, (rect.left, rect.top + y), (rect.right, rect.top + y))

def animate_piece_drop(board, row, col, piece):
    for r in range(row + 1):
        draw_board(board)
        pygame.draw.circle(screen, LIGHT_RED if piece == PLAYER_PIECE else PALE_YELLOW,
                           (int(col * SQUARESIZE + SQUARESIZE / 2), height - int(r * SQUARESIZE + SQUARESIZE / 2)),
                           RADIUS)
        pygame.display.update()
        pygame.time.wait(100)

def draw_board(board):
    screen.fill(BACKGROUND_COLOR)
    draw_gradient_rect(screen, DARK_BLUE, PALE_YELLOW, pygame.Rect(0, SQUARESIZE, width, height))

    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT):
            pygame.draw.rect(screen, DARK_BLUE, (c * SQUARESIZE, r * SQUARESIZE + SQUARESIZE, SQUARESIZE, SQUARESIZE))
            pygame.draw.circle(screen, SILVER, (int(c * SQUARESIZE + SQUARESIZE / 2),
                                                int(r * SQUARESIZE + SQUARESIZE + SQUARESIZE / 2)), RADIUS)

    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT):
            if board[r][c] == PLAYER_PIECE:
                pygame.draw.circle(screen, LIGHT_RED, (int(c * SQUARESIZE + SQUARESIZE / 2),
                                                       height - int(r * SQUARESIZE + SQUARESIZE / 2)), RADIUS)
            elif board[r][c] == AI_PIECE:
                pygame.draw.circle(screen, PALE_YELLOW, (int(c * SQUARESIZE + SQUARESIZE / 2),
                                                         height - int(r * SQUARESIZE + SQUARESIZE / 2)), RADIUS)
    pygame.display.update()

# Initialize Pygame
pygame.init()

SQUARESIZE = 100
width = COLUMN_COUNT * SQUARESIZE
height = (ROW_COUNT + 1) * SQUARESIZE
size = (width, height)
RADIUS = int(SQUARESIZE / 2 - 5)

screen = pygame.display.set_mode(size)
draw_board(create_board())
pygame.display.update()

myfont = pygame.font.SysFont("monospace", 75)
board = create_board()
game_over = False

# Main game loop
while not game_over:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        if event.type == pygame.MOUSEMOTION:
            pygame.draw.rect(screen, BACKGROUND_COLOR, (0, 0, width, SQUARESIZE))
            posx = event.pos[0]
            if not game_over:
                pygame.draw.circle(screen, LIGHT_RED, (posx, int(SQUARESIZE / 2)), RADIUS)

        if event.type == pygame.MOUSEBUTTONDOWN:
            pygame.draw.rect(screen, BACKGROUND_COLOR, (0, 0, width, SQUARESIZE))
            if not game_over:
                posx = event.pos[0]
                col = int(math.floor(posx / SQUARESIZE))

                if is_valid_location(board, col):
                    row = get_next_open_row(board, col)
                    animate_piece_drop(board, row, col, PLAYER_PIECE)
                    drop_piece(board, row, col, PLAYER_PIECE)

                    if winning_move(board, PLAYER_PIECE):
                        label = myfont.render("Player 1 wins!!", 1, LIGHT_RED)
                        screen.blit(label, (40, 10))
                        draw_board(board)
                        pygame.display.update()
                        game_over = True
                    elif is_draw(board):
                        label = myfont.render("It's a Draw!", 1, SILVER)
                        screen.blit(label, (40, 10))
                        draw_board(board)
                        pygame.display.update()
                        game_over = True

                    print_board(board)
                    draw_board(board)

                    if not game_over:
                        col, minimax_score = minimax(board, 5, -math.inf, math.inf, True)

                        if is_valid_location(board, col):
                            row = get_next_open_row(board, col)
                            animate_piece_drop(board, row, col, AI_PIECE)
                            drop_piece(board, row, col, AI_PIECE)

                            if winning_move(board, AI_PIECE):
                                label = myfont.render("Player 2 wins!!", 1, PALE_YELLOW)
                                screen.blit(label, (40, 10))
                                draw_board(board)
                                pygame.display.update()
                                game_over = True
                            elif is_draw(board):
                                label = myfont.render("It's a Draw!", 1, SILVER)
                                screen.blit(label, (40, 10))
                                draw_board(board)
                                pygame.display.update()
                                game_over = True

                            print_board(board)
                            draw_board(board)

            if game_over:
                pygame.time.wait(3000)  # Delay to show winning/draw message

